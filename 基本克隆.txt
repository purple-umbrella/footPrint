   // function deepClone(target,origin) {
        //     let _str = Object.prototype.toString;
        //         for(let prop in origin) {
        //             if(origin.hasOwnProperty(prop)) {
        //                 if(origin != "null" && typeof(origin[prop]) == "object") {
        //                     _str.call(origin[prop]) == "[object Object]" ?target[prop] = {} :  target[prop] = [];
        //                     deepClone(target[prop],origin[prop])
        //                 }else{
        //                     target[prop] = origin[prop];
        //                 }
        //             }
        //         }
        //         return target;
        //     }

 =================================
//         function deepCloneObject(obj, newObj) {
//     for (var temp in obj) {//遍历对象的所有属性
//         if (obj.hasOwnProperty(temp)) {
//             if (obj[temp] instanceof Object || obj[temp] instanceof Array) {
//                 var tempNewObj = {};
//                 newObj[temp] = deepClone(obj[temp], tempNewObj);
//             } else {
//                 newObj[temp] = obj[temp];
//             }
//         }
//     }
//     return newObj;
// }
// function deepCloneArray(arr, newArr) {
//     for (var i = 0 ; i < arr.length ; i ++) {
//         if (arr[i] instanceof Object || arr[i] instanceof  Array) {
//             var tempNewObj = {};
//             newArr[i] = deepClone(arr[i], tempNewObj);
//         } else {
//             newArr[i] = arr[i];
//         }
//     }
//     return newArr;
// }
// function deepClone(obj, newObj) {
//     if (obj instanceof Array) {
//         //处理数组
//         newObj = [];
//         return deepCloneArray(obj, newObj);
//     } else if (obj instanceof Object) {
//         //处理对象
//         newObj = {};
//         return deepCloneObject(obj, newObj);
//     } else {//可能传了数，可能传了个字符串
//         return newObj = obj;
//     }
// }

  ==============================
弊端：无法实现函数和正则等特殊对象的克隆、会抛弃对象的constructor，所有的构造函数会指向Object、对象有循环引用会报错
// JSON.parse(JSON.stringify(obj));



//判断对象类型  数组 对象  函数  正则 date对象

/*
    obj  数据
    type 数据类型  
    如果数据和数据类型一致返回true，不一致返回false
*/
function isType(obj,type) {
    if(typeof(obj) != "object") return false;
    let t = null;
    let typeStr = Object.prototype.toString.call(obj);
    switch(type) {
        case "Array":
            t = typeStr == "[object Array]";
            break;
        case "Date":
            t = typeStr == "[object Date]";
            break;
        case "RegExp":
            t = typeStr == "[object RegExp]";
            break;
        case "Object":
            t = typeStr == "[object Object]";
            break;
        default:
            t = false;
    }
    return t;
}

//获取正则属性的函数
function getRegExp(reg){
    let flags = "";
    if(reg.global) flags += "g";
    if(reg.ignoreCase) flags += "i";
    if(reg.multiline) flags += "m";
    return flags;
}


//处理正则，原型，日期，和循环引用问题
function clone(parent) {
    //维护两个存储环引用的数组
    let parents = [];
    let children = [];
    let _Clone = parent => {
        if(parent == null) return null;
        if(typeof(parent) != "object") return parent;
        let child,proto;
        if(isType(parent,"RegExp")) {  //正则
            child = new RegExp(parent.source,getRegExp(parent));
            if(parent.lastIndex) child.lastIndex = parent.lastIndex;
        }else if(isType(parent,"Date")) {   //日期
            child = new Date(parent.getTime());
        }else{   //克隆原型
            proto = Object.getPrototypeOf(parent);
            child = Object.create(proto);
        }
        //循环引用问题
        let index = parents.indexOf(parents);
        if(index != -1) {
            return children[index];
        }else{
            parents.push(parents);
            children.push(child);
        }
        for(let prop in parent) {
            if(parent.hasOwnProperty(prop)) {
                child[prop] = _Clone(parent[prop])
            }
        }
        return child;
    }
    return _clone(parent);
}
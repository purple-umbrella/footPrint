   // function deepClone(target,origin) {
        //     let _str = Object.prototype.toString;
        //         for(let prop in origin) {
        //             if(origin.hasOwnProperty(prop)) {
        //                 if(origin != "null" && typeof(origin[prop]) == "object") {
        //                     _str.call(origin[prop]) == "[object Object]" ?target[prop] = {} :  target[prop] = [];
        //                     deepClone(target[prop],origin[prop])
        //                 }else{
        //                     target[prop] = origin[prop];
        //                 }
        //             }
        //         }
        //         return target;
        //     }

 =================================
//         function deepCloneObject(obj, newObj) {
//     for (var temp in obj) {//遍历对象的所有属性
//         if (obj.hasOwnProperty(temp)) {
//             if (obj[temp] instanceof Object || obj[temp] instanceof Array) {
//                 var tempNewObj = {};
//                 newObj[temp] = deepClone(obj[temp], tempNewObj);
//             } else {
//                 newObj[temp] = obj[temp];
//             }
//         }
//     }
//     return newObj;
// }
// function deepCloneArray(arr, newArr) {
//     for (var i = 0 ; i < arr.length ; i ++) {
//         if (arr[i] instanceof Object || arr[i] instanceof  Array) {
//             var tempNewObj = {};
//             newArr[i] = deepClone(arr[i], tempNewObj);
//         } else {
//             newArr[i] = arr[i];
//         }
//     }
//     return newArr;
// }
// function deepClone(obj, newObj) {
//     if (obj instanceof Array) {
//         //处理数组
//         newObj = [];
//         return deepCloneArray(obj, newObj);
//     } else if (obj instanceof Object) {
//         //处理对象
//         newObj = {};
//         return deepCloneObject(obj, newObj);
//     } else {//可能传了数，可能传了个字符串
//         return newObj = obj;
//     }
// }

  ==============================
// JSON.parse(JSON.stringify(obj));